# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: STOCK BATCH

on:
    push:
        branches: [ master ]
    pull_request:
        paths:
            - stock-batch/**

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            -   uses: actions/checkout@v2
            -   name: Set up JDK 11
                uses: actions/setup-java@v2
                with:
                    java-version: '11'
                    distribution: 'zulu'
            -   name: Build with Gradle
                uses: gradle/gradle-build-action@937999e9cc2425eddc7fd62d1053baf041147db7
                with:
                    arguments: clean stock-batch:build
            -   uses: actions/upload-artifact@v2
                with:
                    name: stock-batch-artifact
                    path: ./stock-batch/build/libs/stock-batch-0.0.1-SNAPSHOT.jar

    deploy:
        if: ${{ github.ref == 'refs/heads/master' }}
        needs: build
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v2
            -   uses: actions/download-artifact@v2
                with:
                    name: stock-batch-artifact
                    path: ./stock-batch/build/libs/
            # aws credentials
            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v1
                with:
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                    aws-region: ${{ secrets.AWS_SERVICE_REGION }}

            -   name: Login to Amazon ECR
                id: login-ecr
                uses: aws-actions/amazon-ecr-login@v1

            # Build Docker Image
            -   name: Build Docker Image
                run: |
                    docker build --build-arg JAR_FILE=./stock-batch/build/libs/stock-batch-0.0.1-SNAPSHOT.jar -t stock/batch:${{github.run_number}} .
                    docker tag stock/batch:${{github.run_number}} 702867482623.dkr.ecr.ap-northeast-2.amazonaws.com/stock/batch:${{github.run_number}}
            # Push Docker Image
            -   name: Push Docker Image
                run: |
                    docker push 702867482623.dkr.ecr.ap-northeast-2.amazonaws.com/stock/batch:${{github.run_number}}
            # Trigger kube-argo github action
            -   name: Trigger kube-argo
                run: |
                    curl -X POST https://api.github.com/repos/lingi04/kube-argo/dispatches \
                    -H 'Accept: application/vnd.github+json' \
                    -H "Authorization: Bearer ${{secrets.PERSONAL_ACCESS_KEY}}" \
                    -d '{"event_type": "stock-batch", "client_payload": { "repository":"stock", "project": "stock-batch", "runNumber":"${{github.run_number}}" }}'

